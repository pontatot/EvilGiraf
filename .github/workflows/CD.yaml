name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]

permissions:
  contents: write

jobs:
  deploy:
    name: Deploy to Kubernetes
    runs-on: github-runner-evilgiraf
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '6.0.x'

      - name: Determine Version
        id: version
        uses: gittools/actions/gitversion/execute@v3.1.11
        with:
          useConfigFile: true

      - name: Setup Kubernetes config
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Deploy with Helm
        run: |
          helm dependency update helm-chart
          helm upgrade --install evilgiraf helm-chart \
            --namespace evilgiraf \
            --create-namespace \
            --set api.image.tag='${{ steps.version.outputs.semVer }}' \
            --set api.baseImage.tag='${{ steps.version.outputs.semVer }}' \
            --set front.image.tag='${{ steps.version.outputs.semVer }}' \
            --set api.auth.apiKey='${{ secrets.API_KEY }}' \
            --set postgresql.auth.password='${{ secrets.POSTGRES_PASSWORD }}' \
            --set api.dockerRegistry.url='${{ secrets.REGISTRY_URL }}' \
            --set api.dockerRegistry.username='${{ secrets.REGISTRY_USERNAME }}' \
            --set api.dockerRegistry.password='${{ secrets.REGISTRY_PASSWORD }}' \
            --wait --timeout 15m

      - name: Create Git Tag
        run: |
          git config user.email "gitversion@evilgiraf.com"
          git config user.name "GitVersion"
          git tag -a v${{ steps.version.outputs.semVer }} -m "Release v${{ steps.version.outputs.semVer }}"
          git push origin v${{ steps.version.outputs.semVer }}
