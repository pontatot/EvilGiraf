name: CI

on:
  push:
    branches: ['**']

jobs:
  tests:
    name: Tests
    runs-on: github-runner-evilgiraf

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true

      - name: Install dependencies
        run: dotnet restore --locked-mode

      - name: Run unit tests
        run: dotnet test

  build:
    name: Build
    runs-on: github-runner-evilgiraf
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '6.0.x'

      - name: Determine Version
        id: version
        uses: gittools/actions/gitversion/execute@v3.1.11
        with:
          useConfigFile: true

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Pull images for cache
        run: |
          docker pull '${{ secrets.REGISTRY_URL }}/evil-giraf-base:latest'
          docker pull '${{ secrets.REGISTRY_URL }}/evil-giraf:latest'
      
      - name: Build docker images
        run: |
          docker build \
            --cache-to type=inline \
            --cache-from 'type=registry,ref=${{ secrets.REGISTRY_URL }}/evil-giraf-base:latest' \
            -t evil-giraf-base EvilGiraf
          
          docker build \
            --cache-to type=inline \
            --cache-from 'type=registry,ref=${{ secrets.REGISTRY_URL }}/evil-giraf:latest' \
            -t evil-giraf .

      - name: Tag main docker images with 'latest'
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag evil-giraf-base '${{ secrets.REGISTRY_URL }}/evil-giraf-base:latest'
          docker tag evil-giraf '${{ secrets.REGISTRY_URL }}/evil-giraf:latest'

      - name: Tag docker images
        run: |
          docker tag evil-giraf-base '${{ secrets.REGISTRY_URL }}/evil-giraf-base:${{ steps.version.outputs.semVer }}'
          docker tag evil-giraf-base '${{ secrets.REGISTRY_URL }}/evil-giraf-base:${{ github.sha }}'
          docker tag evil-giraf '${{ secrets.REGISTRY_URL }}/evil-giraf:${{ steps.version.outputs.semVer }}'
          docker tag evil-giraf '${{ secrets.REGISTRY_URL }}/evil-giraf:${{ github.sha }}'

      - name: Push docker images
        run: |
          docker push -a '${{ secrets.REGISTRY_URL }}/evil-giraf-base'
          docker push -a '${{ secrets.REGISTRY_URL }}/evil-giraf'

  sonarqube:
    name: SonarQube analysis
    runs-on: github-runner-evilgiraf
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          cache: true

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.1.11
        with:
          versionSpec: '6.0.x'

      - name: Determine Version
        id: version
        uses: gittools/actions/gitversion/execute@v3.1.11
        with:
          useConfigFile: true

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Run SonarQube Analysis
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
            /k:"EvilGiraf" \
            /v:${{ steps.version.outputs.semVer }} \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.scanner.scanAll=true

      - name: Install dependencies
        run: dotnet restore --locked-mode

      - name: Build Project
        run: dotnet build

      - name: Run Tests and Generate Coverage
        run: |
          dotnet test --collect:"XPlat Code Coverage;Format=opencover" --results-directory ./TestResults

      - name: Complete SonarQube Analysis
        run: |
          ./.sonar/scanner/dotnet-sonarscanner end \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
